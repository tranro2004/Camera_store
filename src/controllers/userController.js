const User = require('../models/userModel');
const bcrypt = require('bcryptjs');
const auth = require('../utils/auth');
const jwt = require('jsonwebtoken');
const checkAdmin = require('../middleware/roleMiddleware'); // Import middleware ki·ªÉm tra quy·ªÅn admin




class UserController {
    async getAllUsers(req) {
        try {
            // Ki·ªÉm tra quy·ªÅn admin
            if (req.user.role !== 'admin') {
                throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p danh s√°ch ng∆∞·ªùi d√πng!");
            }

            const users = await User.getAll();
            return { success: true, data: users };
        } catch (error) {
            console.error("L·ªói l·∫•y danh s√°ch users:", error);
            return { success: false, message: error.message || "L·ªói m√°y ch·ªß" };
        }
    }

    async register(req, res) {
        try {
            console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);
            const { name, email, phone, address, password, role } = req.body;

            if (!name || !email || !password) {
                return res.status(400).json({ error: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });
            }

            // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
            const existingUser = await User.getUserByEmail(email);
            if (existingUser) {
                return res.status(400).json({ error: "Email ƒë√£ t·ªìn t·∫°i!" });
            }

            // X√°c ƒë·ªãnh role
            let userRole = role === 'admin' ? 'admin' : 'user';
            if (userRole === 'admin') {
                const hasAdmin = await User.hasAdmin();
                if (hasAdmin) {
                    return res.status(400).json({ error: "Ch·ªâ c√≥ th·ªÉ c√≥ 1 admin trong h·ªá th·ªëng!" });
                }
            }

            // M√£ h√≥a m·∫≠t kh·∫©u
            const hashedPassword = await bcrypt.hash(password, 10);

            // T·∫°o user
            await User.create({ name, email, phone, address, password: hashedPassword, role: userRole });

            res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
        } catch (error) {
            console.error("L·ªói khi ƒëƒÉng k√Ω:", error);
            res.status(500).json({ error: "L·ªói m√°y ch·ªß" });
        }
    }

    async login(req, res) {
        try {
            console.log("D·ªØ li·ªáu ƒëƒÉng nh·∫≠p:", req.body);
            const { email, password } = req.body;

            if (!email || !password) {
                return res.status(400).json({ error: "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u" });
            }

            const user = await User.getUserByEmail(email);
            if (!user) {
                return res.status(400).json({ error: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
            }

            const isMatch = await bcrypt.compare(password, user.password);
            if (!isMatch) {
                return res.status(400).json({ error: "Sai m·∫≠t kh·∫©u" });
            }

           // T·∫°o JWT token
           const currentUser = {
            userId: user.user_id,
            email: user.email,
            role: user.role
           }
           const accessToken = auth.generateAccessToken(currentUser);
           res.cookie('accessToken', accessToken, {
                httpOnly: true
            });
            res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", token: accessToken });

           
        }catch (error) {
            console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", error);
            res.status(500).json({ error: "L·ªói m√°y ch·ªß" });
        }

    }


    // üóë X√≥a ng∆∞·ªùi d√πng theo ID
    async deleteUser(req, res) {
        try {
            // Ki·ªÉm tra quy·ªÅn admin
            if (req.user.role !== 'admin') {
                return res.status(403).json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng!" });
            }

            const userId = req.params.id;

            const user = await User.getUserById(userId);
            if (!user) {
                return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
            }

            await User.delete(userId);
            res.status(200).json({ message: "Ng∆∞·ªùi d√πng ƒë√£ b·ªã x√≥a!" });
        } catch (error) {
            console.error("L·ªói khi x√≥a ng∆∞·ªùi d√πng:", error);
            res.status(500).json({ error: "L·ªói m√°y ch·ªß" });
        }
    }

    // ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
    async updateUser(req, res) {
        try {
            const userId = req.params.id;
            const { name, email, phone, address, role } = req.body;

            console.log("C·∫≠p nh·∫≠t user ID:", userId);

            // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
            const user = await User.getUserById(userId);
            if (!user) {
                return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
            }

            // N·∫øu ƒëang c·∫≠p nh·∫≠t email, ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
            if (email && email !== user.email) {
                const existingUser = await User.getUserByEmail(email);
                if (existingUser) {
                    return res.status(400).json({ error: "Email ƒë√£ t·ªìn t·∫°i!" });
                }
            }

            // N·∫øu user kh√¥ng ph·∫£i admin, kh√¥ng cho ph√©p ƒë·ªïi role th√†nh admin
            if (role === 'admin' && user.role !== 'admin') {
                return res.status(400).json({ error: "Kh√¥ng th·ªÉ ch·ªânh s·ª≠a user th√†nh admin!" });
            }

            // C·∫≠p nh·∫≠t th√¥ng tin user
            await User.update(userId, { name, email, phone, address });

            res.status(200).json({ message: "Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!" });
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error);
            res.status(500).json({ error: "L·ªói m√°y ch·ªß" });
        }
    }

    async logout(req, res) {
        res.clearCookie('accessToken');
        res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
    }

//     async getUserProfile(req, res) {
//         try {
//             const userId = req.user.userId;
//             const user = await User.getUserById(userId);

//             if (!user) {
//                 return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
//             }

//             if (user.role === 'admin') {
//                 res.render('admin-profile', { user });
//             } else {
//                 res.render('user-profile', { user });
//             }
            
//         } catch (error) {
//             console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
//             res.status(500).json({ error: "L·ªói m√°y ch·ªß" });
//         }
//     }

}

module.exports = new UserController();
