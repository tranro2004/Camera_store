const Product = require('../models/productModel');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const axios = require('axios');
const checkAdmin = require('../middleware/roleMiddleware'); // Import middleware ki·ªÉm tra quy·ªÅn admin
const categoryModel = require('../models/categoryModel');
const brandModel = require('../models/brandModel');



// ƒê·∫£m b·∫£o th∆∞ m·ª•c uploads t·ªìn t·∫°i
const uploadDir = 'uploads/';
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir);
}

// C·∫•u h√¨nh Multer ƒë·ªÉ l∆∞u ·∫£nh v√†o th∆∞ m·ª•c uploads/
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploads/'); // L∆∞u ·∫£nh v√†o th∆∞ m·ª•c uploads
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, uniqueSuffix + path.extname(file.originalname)); // T·∫°o t√™n file duy nh·∫•t
    }
});

// B·ªô l·ªçc file (ch·ªâ ch·∫•p nh·∫≠n ·∫£nh PNG, JPG, JPEG)
const fileFilter = (req, file, cb) => {
    console.log("üì∏ ƒê·ªãnh d·∫°ng file nh·∫≠n ƒë∆∞·ª£c:", file.mimetype); // Debug file type
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];

    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        console.error("‚ùå File b·ªã t·ª´ ch·ªëi: ", file.mimetype); // In ra l·ªói n·∫øu b·ªã t·ª´ ch·ªëi
        cb(new Error('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh PNG, JPG, JPEG!'), false);
    }
};


const upload = multer({ storage: storage, fileFilter: fileFilter });


class ProductController {
    async getAllProducts(req, res) {
        try {
            const { category_id, brand_id } = req.query; // Get filters from query parameters
            const filters = {};
        
            if (category_id) filters.category_id = category_id;
            if (brand_id) filters.brand_id = brand_id;
        
            const products = await Product.getAllProducts(filters);
            res.json({ success: true, data: products });
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
            res.status(500).json({ success: false, message: "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m" });
        }
    }

    async getProductById(req, res) {
        try {
            const { id } = req.params;
            const product = await Product.getProductById(id);
    
            if (!product) {
                return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!" });
            }
    
            // Ensure the image_url is correctly formatted
            const imageUrl = product.image_url ? `http://localhost:3000/uploads/${product.image_url}` : null;
    
            res.json({
                success: true,
                data: { ...product, image_url: imageUrl }
            });
        } catch (error) {
            console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m:", error);
            res.status(500).json({ success: false, message: "L·ªói khi l·∫•y s·∫£n ph·∫©m" });
        }
    }
        // L·∫•y chi ti·∫øt s·∫£n ph·∫©m
    async getProductDetail(req, res) {
        try {
        const productId = req.params.productId;  // L·∫•y ID s·∫£n ph·∫©m t·ª´ URL
        const product = await Product.getProductById(productId);  // Truy v·∫•n s·∫£n ph·∫©m t·ª´ database
    
        if (!product) {
            return res.status(404).json({ message: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i' });  // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m, tr·∫£ v·ªÅ l·ªói
        }
    
        // Chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh c·ªßa s·∫£n ph·∫©m th√†nh URL h·ª£p l·ªá (n·∫øu c√≥)
        const imageUrl = product.image_url ? `http://localhost:3000/uploads/${product.image_url}` : null;
    
        // G·ª≠i d·ªØ li·ªáu s·∫£n ph·∫©m ƒë√£ l·∫•y t·ªõi view
        res.render('product-detail', {
            product: {
            ...product,
            image_url: imageUrl  // ƒê·∫£m b·∫£o r·∫±ng image_url l√† URL ƒë·∫ßy ƒë·ªß
            }
        });
        } catch (error) {
        console.error('Error fetching product details:', error);
        res.status(500).json({ message: 'C√≥ l·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m', error });
        }
    };

    async addProduct(req, res) {
        try {
            // Ki·ªÉm tra quy·ªÅn admin
            if (req.user.role !== 'admin') {
                throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m s·∫£n ph·∫©m!");
            }
    
            const { name, description, price, quantity, category_id, brand_id } = req.body;
            let image_url = null;
    
            // N·∫øu c√≥ file ·∫£nh th√¨ l∆∞u ƒë∆∞·ªùng d·∫´n
            if (req.file) {
                image_url = req.file.filename;
            }
    
            // Ki·ªÉm tra n·∫øu thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc
            if (!name || !description || !price || !quantity || !category_id || !brand_id) {
                throw new Error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m!");
            }
    
            const productId = await Product.addProduct({ name, description, price, quantity, image_url, category_id, brand_id });
    
            return {
                success: true,
                message: "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!",
                productId,
                data: { name, description, price, quantity, image_url, category_id, brand_id }
            };
        } catch (error) {
            console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", error);
            throw error; // N√©m l·ªói ƒë·ªÉ route x·ª≠ l√Ω
        }
    }
    

    async updateProduct(req, res) {
        try {
            // Ki·ªÉm tra quy·ªÅn admin
            if (req.user.role !== 'admin') {
                return res.status(403).json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a s·∫£n ph·∫©m!" });
            }

            const { id } = req.params;
            const updatedProduct = req.body;
    
            if (req.file) {
                updatedProduct.image_url = req.file.filename; // Ch·ªâ l∆∞u t√™n file ·∫£nh
            }
    
            const success = await Product.updateProduct(id, updatedProduct);
    
            if (!success) {
                return res.status(404).json({ success: false, message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!" });
            }
    
            res.json({ success: true, message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!", data: updatedProduct });
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error);
            res.status(500).json({ success: false, message: "L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m" });
        }
    }
    

    async deleteProduct(req, res) {
        try {
            // Ki·ªÉm tra quy·ªÅn admin
            if (req.user.role !== 'admin') {
                return res.status(403).json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a s·∫£n ph·∫©m!" });
            }

            const { id } = req.params;
            const success = await Product.deleteProduct(id);

            if (!success) {
                return res.status(404).json({ success: false, message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!" });
            }

            res.json({ success: true, message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!" });
        } catch (error) {
            console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
            res.status(500).json({ success: false, message: "L·ªói khi x√≥a s·∫£n ph·∫©m" });
        }
    }

    

    // L·∫•y danh s√°ch danh m·ª•c
    async getCategories(req, res) {
        try {
            const categories = await categoryModel.getAllCategories();
            if (!categories || categories.length === 0) {
                return res.status(404).json({ success: false, message: "Kh√¥ng c√≥ danh m·ª•c n√†o!" });
            }
            res.status(200).json({ success: true, data: categories });
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch danh m·ª•c:", error.message);
            res.status(500).json({ success: false, message: "L·ªói khi l·∫•y danh s√°ch danh m·ª•c", error: error.message });
        }
    }

    // L·∫•y danh m·ª•c theo ID
    async getCategoryById(req, res) {
        try {
            const { id } = req.params;
            const category = await categoryModel.getCategoryById(id);
            if (!category) {
                return res.status(404).json({ success: false, message: "Danh m·ª•c kh√¥ng t·ªìn t·∫°i!" });
            }
            res.status(200).json({ success: true, data: category });
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh m·ª•c:", error.message);
            res.status(500).json({ success: false, message: "L·ªói khi l·∫•y danh m·ª•c", error: error.message });
        }
    }

    // Th√™m danh m·ª•c m·ªõi
    async addCategory(req, res) {
        try {
            if (req.user.role !== 'admin') {
                return res.status(403).json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m danh m·ª•c!" });
            }

            const { name, description } = req.body;
            if (!name) {
                return res.status(400).json({ success: false, message: "T√™n danh m·ª•c l√† b·∫Øt bu·ªôc!" });
            }

            const categoryId = await categoryModel.addCategory({ name, description });
            res.status(201).json({
                success: true,
                message: "Th√™m danh m·ª•c th√†nh c√¥ng!",
                data: { categoryId, name, description }
            });
        } catch (error) {
            console.error("L·ªói khi th√™m danh m·ª•c:", error.message);
            res.status(500).json({ success: false, message: "L·ªói khi th√™m danh m·ª•c", error: error.message });
        }
    }

    // C·∫≠p nh·∫≠t danh m·ª•c
    async updateCategory(req, res) {
        try {
            if (req.user.role !== 'admin') {
                return res.status(403).json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a danh m·ª•c!" });
            }

            const { id } = req.params;
            const { name, description } = req.body;

            const category = await categoryModel.getCategoryById(id);
            if (!category) {
                return res.status(404).json({ success: false, message: "Danh m·ª•c kh√¥ng t·ªìn t·∫°i!" });
            }

            const success = await categoryModel.updateCategory(id, { name, description });
            if (!success) {
                return res.status(500).json({ success: false, message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c!" });
            }

            res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng!" });
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c:", error.message);
            res.status(500).json({ success: false, message: "L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c", error: error.message });
        }
    }

    // X√≥a danh m·ª•c
    async deleteCategory(req, res) {
        try {
            if (req.user.role !== 'admin') {
                return res.status(403).json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a danh m·ª•c!" });
            }

            const { id } = req.params;
            const category = await categoryModel.getCategoryById(id);
            if (!category) {
                return res.status(404).json({ success: false, message: "Danh m·ª•c kh√¥ng t·ªìn t·∫°i!" });
            }

            const success = await categoryModel.deleteCategory(id);
            if (!success) {
                return res.status(500).json({ success: false, message: "Kh√¥ng th·ªÉ x√≥a danh m·ª•c!" });
            }

            res.status(200).json({ success: true, message: "X√≥a danh m·ª•c th√†nh c√¥ng!" });
        } catch (error) {
            console.error("L·ªói khi x√≥a danh m·ª•c:", error.message);
            res.status(500).json({ success: false, message: "L·ªói khi x√≥a danh m·ª•c", error: error.message });
        }
    }

    // L·∫•y danh s√°ch th∆∞∆°ng hi·ªáu
    async getBrands(req, res) {
        try {
            const brands = await brandModel.getAllBrands();
            res.status(200).json({ success: true, data: brands });
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch th∆∞∆°ng hi·ªáu:", error.message);
            res.status(500).json({ success: false, message: "L·ªói khi l·∫•y danh s√°ch th∆∞∆°ng hi·ªáu", error: error.message });
        }
    }

    // L·∫•y th∆∞∆°ng hi·ªáu theo ID
    async getBrandById(req, res) {
        try {
            const { id } = req.params;
            const brand = await brandModel.getBrandById(id);
            if (!brand) {
                return res.status(404).json({ success: false, message: "Th∆∞∆°ng hi·ªáu kh√¥ng t·ªìn t·∫°i!" });
            }
            res.status(200).json({ success: true, data: brand });
        } catch (error) {
            console.error("L·ªói khi l·∫•y th∆∞∆°ng hi·ªáu:", error.message);
            res.status(500).json({ success: false, message: "L·ªói khi l·∫•y th∆∞∆°ng hi·ªáu", error: error.message });
        }
    }

    // Th√™m th∆∞∆°ng hi·ªáu m·ªõi
    async addBrand(req, res) {
        try {
            if (req.user.role !== 'admin') {
                return res.status(403).json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m th∆∞∆°ng hi·ªáu!" });
            }

            const { name, logo_url, description } = req.body;
            if (!name) {
                return res.status(400).json({ success: false, message: "T√™n th∆∞∆°ng hi·ªáu l√† b·∫Øt bu·ªôc!" });
            }

            const brandId = await brandModel.addBrand({ name, logo_url, description });
            res.status(201).json({
                success: true,
                message: "Th√™m th∆∞∆°ng hi·ªáu th√†nh c√¥ng!",
                data: { brandId, name, logo_url, description }
            });
        } catch (error) {
            console.error("L·ªói khi th√™m th∆∞∆°ng hi·ªáu:", error.message);
            res.status(500).json({ success: false, message: "L·ªói khi th√™m th∆∞∆°ng hi·ªáu", error: error.message });
        }
    }

    // C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu
    async updateBrand(req, res) {
        try {
            if (req.user.role !== 'admin') {
                return res.status(403).json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a th∆∞∆°ng hi·ªáu!" });
            }

            const { id } = req.params;
            const { name, logo_url, description } = req.body;

            const brand = await brandModel.getBrandById(id);
            if (!brand) {
                return res.status(404).json({ success: false, message: "Th∆∞∆°ng hi·ªáu kh√¥ng t·ªìn t·∫°i!" });
            }

            const success = await brandModel.updateBrand(id, { name, logo_url, description });
            if (!success) {
                return res.status(500).json({ success: false, message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu!" });
            }

            res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu th√†nh c√¥ng!" });
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu:", error.message);
            res.status(500).json({ success: false, message: "L·ªói khi c·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu", error: error.message });
        }
    }

    // X√≥a th∆∞∆°ng hi·ªáu
    async deleteBrand(req, res) {
        try {
            if (req.user.role !== 'admin') {
                return res.status(403).json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a th∆∞∆°ng hi·ªáu!" });
            }

            const { id } = req.params;
            const brand = await brandModel.getBrandById(id);
            if (!brand) {
                return res.status(404).json({ success: false, message: "Th∆∞∆°ng hi·ªáu kh√¥ng t·ªìn t·∫°i!" });
            }

            const success = await brandModel.deleteBrand(id);
            if (!success) {
                return res.status(500).json({ success: false, message: "Kh√¥ng th·ªÉ x√≥a th∆∞∆°ng hi·ªáu!" });
            }

            res.status(200).json({ success: true, message: "X√≥a th∆∞∆°ng hi·ªáu th√†nh c√¥ng!" });
        } catch (error) {
            console.error("L·ªói khi x√≥a th∆∞∆°ng hi·ªáu:", error.message);
            res.status(500).json({ success: false, message: "L·ªói khi x√≥a th∆∞∆°ng hi·ªáu", error: error.message });
        }
    }

    async getAllProductsForAdmin(req, res) {
        try {
            const products = await Product.getAllProducts();
            return products;
        } catch (error) {
            console.error('Error fetching products for admin:', error);
            throw error;
        }
    }
    
    async getProductByIdForAdmin(productId) {
        try {
            const product = await Product.getProductById(productId);
            return product;
        } catch (error) {
            console.error('Error fetching product by ID for admin:', error);
            throw error;
        }
    }

}


module.exports = { productController: new ProductController(), upload, } ;
